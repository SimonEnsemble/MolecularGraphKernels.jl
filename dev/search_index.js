var documenterSearchIndex = {"docs":
[{"location":"#MolecularGraphKernels.jl","page":"MolecularGraphKernels","title":"MolecularGraphKernels.jl","text":"","category":"section"},{"location":"","page":"MolecularGraphKernels","title":"MolecularGraphKernels","text":"Graph kernels transform a graph G into a fixed-size vector boldu. This is useful, for example, when one wishes to train a machine learning model on graph-structured inputs of varying size, topology, and node/edge metadata.","category":"page"},{"location":"","page":"MolecularGraphKernels","title":"MolecularGraphKernels","text":"Modules = [MolecularGraphKernels]","category":"page"},{"location":"#MetaGraphs.MetaGraph-Tuple{MolecularGraph.GraphMol}","page":"MolecularGraphKernels","title":"MetaGraphs.MetaGraph","text":"g = MetaGraph(mol)\n\nConvert a GraphMol object into the corresponding MetaGraph\n\nnote: Note\nHydrogen atoms are generally treated implicitly.\n\n\n\n\n\n","category":"method"},{"location":"#MolecularGraphKernels.banner-Tuple{}","page":"MolecularGraphKernels","title":"MolecularGraphKernels.banner","text":"RWGKSVM.banner()\n\nPrints the stylized ASCII console banner for the package.\n\n\n\n\n\n","category":"method"},{"location":"#MolecularGraphKernels.csi_adj_mat-Tuple{MetaGraph, MetaGraph}","page":"MolecularGraphKernels","title":"MolecularGraphKernels.csi_adj_mat","text":"cpg = csi_adj_mat(graph_a, graph_b)\n\nReturns the adjacency matrix of the CSI product graph of graph_a and graph_b\n\n\n\n\n\n","category":"method"},{"location":"#MolecularGraphKernels.csi_product_graph-Tuple{MetaGraph, MetaGraph}","page":"MolecularGraphKernels","title":"MolecularGraphKernels.csi_product_graph","text":"cpg = csi_product_graph(graph_a, graph_b)\n\nReturns the common subgraph isomorphism product graph of graph_a and graph_b\n\n\n\n\n\n","category":"method"},{"location":"#MolecularGraphKernels.direct_product_graph-Tuple{MetaGraph, MetaGraph}","page":"MolecularGraphKernels","title":"MolecularGraphKernels.direct_product_graph","text":"dpg = direct_product_graph(graph_a, graph_b)\n\nReturns the direct product graph of graph_a and graph_b.\n\nnote: Note\nIf only the adjacency matrix of the DPG is needed (and not the DPG itself) @ref(dpg_adj_mat) should be used instead for performance.\n\nwarning: Warning\nEdge and vertex labels should be of consistent, comparable types, preferably Symbol, Int, Bool, etc., for efficiency. Comparing, for example, String labels will result in significantly poorer performance!\n\n\n\n\n\n","category":"method"},{"location":"#MolecularGraphKernels.dpg_adj_mat-Tuple{MetaGraph, MetaGraph}","page":"MolecularGraphKernels","title":"MolecularGraphKernels.dpg_adj_mat","text":"A = dpg_adj_mat(graph_a, graph_b)\n\nReturns the adjacency matrix of the DPG.\n\n\n\n\n\n","category":"method"},{"location":"#MolecularGraphKernels.random_walk_kernel-Tuple{AbstractMatrix, Int64}","page":"MolecularGraphKernels","title":"MolecularGraphKernels.random_walk_kernel","text":"kernel_score = random_walk_kernel(adj_mat, l)\nkernel_score = random_walk_kernel(dpg, l)\nkernel_score = random_walk_kernel(A, B, l)\n\nReturns the similarity score for two graphs by applying the l-length random walk graph kernel on their direct product graph.\n\n\n\n\n\n","category":"method"}]
}
