var documenterSearchIndex = {"docs":
[{"location":"#MolecularGraphKernels.jl","page":"MolecularGraphKernels","title":"MolecularGraphKernels.jl","text":"","category":"section"},{"location":"","page":"MolecularGraphKernels","title":"MolecularGraphKernels","text":"Graph kernels transform a graph G into a fixed-size vector boldu. This is useful, for example, when one wishes to train a machine learning model on graph-structured inputs of varying size, topology, and node/edge metadata.","category":"page"},{"location":"","page":"MolecularGraphKernels","title":"MolecularGraphKernels","text":"Modules = [MolecularGraphKernels]","category":"page"},{"location":"#MetaGraphs.MetaGraph-Tuple{MolecularGraph.GraphMol}","page":"MolecularGraphKernels","title":"MetaGraphs.MetaGraph","text":"g = MetaGraph(mol)\n\nConvert a GraphMol object into the corresponding MetaGraph\n\nnote: Note\nHydrogen atoms are generally treated implicitly.\n\n\n\n\n\n","category":"method"},{"location":"#MolecularGraphKernels.banner-Tuple{}","page":"MolecularGraphKernels","title":"MolecularGraphKernels.banner","text":"RWGKSVM.banner()\n\nPrints the stylized ASCII console banner for the package.\n\n\n\n\n\n","category":"method"},{"location":"#MolecularGraphKernels.build_v₁v₂_pair_to_w_map-Tuple{MetaGraph, MetaGraph}","page":"MolecularGraphKernels","title":"MolecularGraphKernels.build_v₁v₂_pair_to_w_map","text":"map (v₁ ∈ g₁, v₂ ∈ g₂) ↦ w ∈ g₁ x g₂\n\n\n\n\n\n","category":"method"},{"location":"#MolecularGraphKernels.build_w_to_v₁v₂_pair_map-Tuple{SparseArrays.SparseMatrixCSC{Int64, Int64}}","page":"MolecularGraphKernels","title":"MolecularGraphKernels.build_w_to_v₁v₂_pair_map","text":"map w ∈ g₁ x g₂ ↦ (v₁ ∈ g₁, v₂ ∈ g₂)\n\n\n\n\n\n","category":"method"},{"location":"#MolecularGraphKernels.graph_kernel-Tuple{AbstractMatrix, Int64}","page":"MolecularGraphKernels","title":"MolecularGraphKernels.graph_kernel","text":"kernel_score = graph_kernel(adj_mat, l)\nkernel_score = graph_kernel(g₁xg₂, l)\nkernel_score = graph_kernel(g₁, g₂, l, type)\n\nReturns the similarity score for two graphs by applying the l-length random walk graph kernel on their type product graph.\n\n\n\n\n\n","category":"method"},{"location":"#MolecularGraphKernels.product_graph-Tuple{MetaGraph, MetaGraph, Symbol}","page":"MolecularGraphKernels","title":"MolecularGraphKernels.product_graph","text":"compute the product graph (of type type) between g₁ and g₂\n\n\n\n\n\n","category":"method"},{"location":"#MolecularGraphKernels.product_graph_adj_mat-Tuple{MetaGraph, MetaGraph, Symbol}","page":"MolecularGraphKernels","title":"MolecularGraphKernels.product_graph_adj_mat","text":"compute the adjacency matrix of the product graph (of type type) between g₁ and g₂, but do not explicitly construct the graph\n\n\n\n\n\n","category":"method"},{"location":"#MolecularGraphKernels.product_graph_matrix_and_maps-Tuple{MetaGraph, MetaGraph, Symbol}","page":"MolecularGraphKernels","title":"MolecularGraphKernels.product_graph_matrix_and_maps","text":"compute the product graph adjacency matrix and mappings (in each direction) for relating the source graphs and product graph\n\n\n\n\n\n","category":"method"}]
}
