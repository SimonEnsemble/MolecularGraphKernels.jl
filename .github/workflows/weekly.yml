name: Weekly

on:
  schedule: # run at midnight pacific time on Mondays
    - cron: '0 8 * * 1'
  workflow_dispatch: # run on button-press in Actions tab

concurrency: # only allow the most recent workflow to execute
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env: # environment variables
  julia_version: '1.8.2' # julia version to use on all runners (except cross-platform-julia)


jobs: # run in parallel within workflow

  cross-platform-os:
    strategy:
      fail-fast: true
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    steps:
      - name: checkout commit
        uses: actions/checkout@main

      - name: set up Julia
        uses: julia-actions/setup-julia@latest
        with:
          version: ${{ env.julia_version }}
      
      - name: build package
        uses: julia-actions/julia-buildpkg@latest
      
      - name: install dependencies
        run: julia --project --color=yes -e 'import Pkg; Pkg.add("Documenter")'
        shell: bash
      
      - name: run tests
        run: julia --project --color=yes -e 'import Pkg; Pkg.test()'
        shell: bash

  
  cross-platform-julia:
    strategy:
      fail-fast: true
      matrix:
        julia: ['1.6.7', '1.7.3', '1.8.0']
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: checkout commit
        uses: actions/checkout@main

      - name: set up Julia
        uses: julia-actions/setup-julia@latest
        with:
          version: ${{ matrix.julia }}
      
      - name: build package
        uses: julia-actions/julia-buildpkg@latest
      
      - name: install dependencies
        run: julia --project --color=yes -e 'import Pkg; Pkg.add("Documenter")'
        shell: bash
      
      - name: run tests
        run: doctest=false julia --project --color=yes -e 'import Pkg; Pkg.test()'
        shell: bash

  formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: julia-actions/setup-julia@latest
        with:
          version: ${{ env.julia_version }}

      - uses: actions/checkout@main
      
      - name: Install JuliaFormatter
        run: julia  -e 'using Pkg; Pkg.add("JuliaFormatter")'
      
      - name: Run JuliaFormatter
        run: julia  -e 'using JuliaFormatter; format(".", verbose=true)'
          
      - name: Formatting Check
        run: |
          julia -e '
          out = Cmd(`git diff --name-only`) |> read |> String
          if out == ""
              exit(0)
          else
              @error "Some files have not been formatted !!!"
              write(stdout, out)
              exit(1)
          end'

      - if: ${{ failure() }}
        id: juliaformatter-pr
        name: Formatting PR
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: main
          commit-message: JuliaFormatter Action Bot
          title: 'Automatic JuliaFormatter.jl run'
          branch: auto-juliaformatter-pr
          delete-branch: true
          labels: formatting, automated pr, no changelog
